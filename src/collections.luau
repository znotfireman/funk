-- local operators = {}

-- function operators.lt<T>(first: T, second: T): boolean
--   return (first :: any) < (second :: any)
-- end

-- function operators.le<T>(first: T, second: T): boolean
--   return (first :: any) <= (second :: any)
-- end

-- function operators.eq<T>(first: T, second: T): boolean
--   return (first :: any) == (second :: any)
-- end

-- function operators.ne<T>(first: T, second: T): boolean
--   return (first :: any) ~= (second :: any)
-- end

-- function operators.gt<T>(first: T, second: T): boolean
--   return (first :: any) > (second :: any)
-- end

-- function operators.ge<T>(first: T, second: T): boolean
--   return (first :: any) >= (second :: any)
-- end
-- --[[
--     add = function(a, b) return a + b end,
--     div = function(a, b) return a / b end,
--     floordiv = function(a, b) return math.floor(a/b) end,
--     intdiv = function(a, b)
--         local q = a / b
--         if a >= 0 then return math.floor(q) else return math.ceil(q) end
--     end,
--     mod = function(a, b) return a % b end,
--     mul = function(a, b) return a * b end,
--     neq = function(a) return -a end,
--     unm = function(a) return -a end, -- an alias
--     pow = function(a, b) return a ^ b end,
--     sub = function(a, b) return a - b end,
--     truediv = function(a, b) return a / b end,

-- ]]
-- function operators.add<T>(base: T, second: T): boolean
--   return (first :: any) >= (second :: any)
-- end

-- function operators.ge<T>(first: T, second: T): boolean
--   return (first :: any) >= (second :: any)
-- end

-- function operators.ge<T>(first: T, second: T): boolean
--   return (first :: any) >= (second :: any)
-- end

-- function operators.ge<T>(first: T, second: T): boolean
--   return (first :: any) >= (second :: any)
-- end
